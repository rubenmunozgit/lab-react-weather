{"version":3,"sources":["mutations/dateFomat.js","components/Forecast/backgroundColor.js","Context.js","translations/index.js","translations/en.js","translations/es.js","utils/config.js","servicesClients/coordenates.js","servicesClients/weather.js","mutations/maxMinByDate.js","mutations/weatherData.js","components/Loading/Loading.js","components/Current/Current.js","components/Forecast/Forecast.js","components/Switch/Toggle.js","components/Nav/Nav.js","App.js","index.js"],"names":["module","exports","dateFormat","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","timeFormat","dt","toLocaleTimeString","sunHours","getHours","getMinutes","getSeconds","bgColors","getLinearGradient","temp","metrics","_getMaxTemps","MAX_VERYWARN","MAX_WARN","MAX_NORMAL","MAX_COLD","MAX_VERYCOLD","getMaxTemps","concat","LanguageContext","createContext","translations","en","loading_Weather_Info_title","loading_Weather_Info_p","feels_like","humidity","wind","updated","sunrise","sunset","es","config","openWeatherUrl","openWeatherApiKey","process","getCoords","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","navigator","geolocation","abrupt","Promise","resolve","reject","getCurrentPosition","stop","apply","this","arguments","callApi","url","api_call","fetch","sent","json","_x","getMaxMinByDate","list","aggregateByDate","map","wPoint","dt_txt","replace","main","toFixed","reduce","groups","item","group","temps","push","keys","slice","curr","agg","currEle","min","undefined","max","transformData","data","_data","slicedToArray","weather","forecast","_weather$main","_weather$weather$","description","icon","id","speed","_weather$sys","sys","country","city","name","_weather$coord","coord","lat","lon","currentWeather","temperature","wiSpeed","system","geo","Loading","translatedText","useContext","react_default","createElement","Current","props","settings","refresh","windMetrics","sunHoursperDay","className","onClick","stringInject","Forecast","lang","moment","locale","b","Math","percent","key","format","style","width","background","renderForecastDay","Switch","isF","handleToggle","Fragment","checked","onChange","type","htmlFor","Nav","Component","[object Object]","args","super","state","isExpanded","handleOpen","setState","render","_this$props","handleToggleChange","Switch_Toggle","language","translated","App_lang","App","React","loading","weatherData","value","toggleValue","target","handleRefresh","_this$state","_this$state$weatherDa","weatherUrl","forecastUrl","all","then","error","console","log","componentDidMount","position","coords","latitude","long","longitude","catch","err","code","message","componentDidUpdate","prevProps","prevState","_this$state2","_this$state2$weatherD","current","Provider","components_Loading_Loading","components_Nav_Nav","components_Current_Current","assign","components_Forecast_Forecast","rootElement","document","getElementById","ReactDOM","App_App"],"mappings":"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","file":"static/js/main.8209431e.chunk.js","sourcesContent":["const dateFormat = date => {\n  let d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n};\n\nconst timeFormat = dt => {\n  const date = new Date(dt * 1000);\n  return date.toLocaleTimeString();\n};\n\nconst sunHours = dt => {\n  const date = new Date(dt * 1000);\n  return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n};\n\nmodule.exports = { dateFormat, timeFormat, sunHours };\n","const bgColors = {\n  burning: \"rgba(245, 120, 66, 1)\",\n  verywarm: \"rgba(245, 182, 66, 1)\",\n  warm: \"rgba(236, 245, 66, 1)\",\n  normal: \"rgba(66, 245, 72, 1)\",\n  cold: \"rgba(66, 245, 221, 1)\",\n  verycold: \"rgba(66, 239, 245, 1)\",\n};\n\nconst getMaxTemps = (metrics) => ({\n  MAX_VERYWARN: metrics === \"metric\" ? 40 : 104,\n  MAX_WARN: metrics === \"metric\" ? 30 : 86,\n  MAX_NORMAL: metrics === \"metric\" ? 20 : 68,\n  MAX_COLD: metrics === \"metric\" ? 10 : 50,\n  MAX_VERYCOLD: metrics === \"metric\" ? 0 : 32,\n});\n\nconst getLinearGradient = (temp, metrics) => {\n  const {\n    MAX_VERYWARN,\n    MAX_WARN,\n    MAX_NORMAL,\n    MAX_COLD,\n    MAX_VERYCOLD,\n  } = getMaxTemps(metrics);\n\n  if (temp >= MAX_VERYWARN) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 10%, ${bgColors.cold} 30%, ${bgColors.normal} 50%, ${bgColors.warm} 70%, ${bgColors.verywarm} 80%, ${bgColors.burning} 100%`;\n  }\n  if (MAX_WARN <= temp && temp < MAX_VERYWARN) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 10%, ${bgColors.cold} 30%, ${bgColors.normal} 50%, ${bgColors.warm} 70%, ${bgColors.verywarm} 100%`;\n  }\n  if (MAX_NORMAL <= temp && temp < MAX_WARN) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 10%, ${bgColors.cold} 30%, ${bgColors.normal} 50%, ${bgColors.warm} 100%`;\n  }\n  if (MAX_COLD <= temp && temp < MAX_NORMAL) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 10%, ${bgColors.cold} 30%, ${bgColors.normal} 100%`;\n  }\n  if (MAX_VERYCOLD <= temp && temp < MAX_COLD) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 10%, ${bgColors.cold} 100%`;\n  }\n  if (temp < MAX_VERYCOLD) {\n    return `linear-gradient(90deg, ${bgColors.verycold} 0%, ${bgColors.verycold} 100%`;\n  }\n};\n\nmodule.exports = { getLinearGradient };\n","import { createContext } from \"react\";\n\nexport const LanguageContext = createContext();\n","import en from \"./en\";\nimport es from \"./es\";\n\nexport const translations = {\n  en,\n  es\n};\n","export default {\n  loading_Weather_Info_title: \"Loading Weather Information\",\n  loading_Weather_Info_p: \"Please allow access to the browser location\",\n  feels_like: \"feels like\",\n  humidity: \"Humity\",\n  wind: \"Wind\",\n  updated: \"Updated at\",\n  sunrise: \"Sunrise\",\n  sunset: \"Sunset\",\n  sunHours: \"{0} hr of sun\"\n};\n","export default {\n  loading_Weather_Info_title: \"Cargando informacion del Tiempo\",\n  loading_Weather_Info_p:\n    \"Por favor, permita el acceso de la ubicacion en el navegador\",\n  feels_like: \"sensacion de\",\n  humidity: \"Humedad\",\n  wind: \"Viento\",\n  updated: \"Actualizado a las\",\n  sunrise: \"Salida\",\n  sunset: \"Puesta\",\n  sunHours: \"{0} hrs de sol\"\n};\n","const config = {\n  openWeatherUrl: \"https://api.openweathermap.org/data/2.5/\",\n  openWeatherApiKey: process.env.REACT_APP_APIKEY\n};\nexport default config;\n","const getCoords = async () => {\n  if (navigator.geolocation) {\n    return new Promise((resolve, reject) =>\n      navigator.geolocation.getCurrentPosition(resolve, reject)\n    );\n  } else {\n    return new Promise(resolve => resolve({}));\n  }\n};\n\nexport default getCoords;\n","const callApi = async url => {\n  const api_call = await fetch(url);\n  return api_call.json();\n};\n\nexport default callApi;\n","import { dateFormat } from './dateFomat';\n\nconst getMaxMinByDate = list => {\n  const aggregateByDate = list\n    .map(wPoint => ({\n      date: dateFormat(wPoint.dt_txt.replace(/-/g, '/')),\n      temp: wPoint.main.temp.toFixed(1)\n    }))\n    .reduce((groups, item) => {\n      const group = groups[item.date] || { date: groups[item.date], temps: [] };\n      group.date = item.date;\n      group.temps.push(item.temp);\n      groups[item.date] = group;\n      return groups;\n    }, {});\n\n  const groupByDateArray = Object.keys(aggregateByDate)\n    .map(date => ({\n        date,\n        temps: aggregateByDate[date].temps\n      }))\n    .slice(1);\n\n  const tempMaxMinByDate = groupByDateArray.map(curr => {\n    const maxMinByDate = curr.temps.reduce((agg, currEle) => {\n      agg.date = curr.date;\n      agg.min = agg.min === undefined || currEle < agg.min ? currEle : agg.min;\n      agg.max = agg.max === undefined || currEle > agg.max ? currEle : agg.max;\n      //agg[datesTemps[i].date] = minMax\n      return agg;\n    }, {});\n    //console.log(x)\n    return maxMinByDate;\n  });\n  return tempMaxMinByDate;\n};\nexport default getMaxMinByDate;\n","import getMaxMinByDate from './maxMinByDate';\nimport { timeFormat, sunHours } from './dateFomat';\n\nconst transformData = data => {\n  const [weather, forecast] = data;\n  const {\n    main: { temp, feels_like, humidity },\n    weather: [{ description, id: icon }],\n    wind: { speed },\n    sys: { country, sunrise, sunset },\n    dt,\n    name: city,\n    coord: { lat, lon }\n  } = weather;\n  const { list } = forecast;\n  return {\n    currentWeather: {\n      temperature: temp.toFixed(1),\n      feels_like: feels_like.toFixed(1),\n      humidity,\n      description,\n      icon,\n      wiSpeed: speed,\n      dt: timeFormat(dt)\n    },\n    forecast: {\n      list: getMaxMinByDate(list)\n    },\n    system: {\n      country,\n      city,\n      sunHours: {\n        sunrise: timeFormat(sunrise),\n        sunset: timeFormat(sunset),\n        sunHours: sunHours(sunset - sunrise)\n      },\n      geo: {\n        lat,\n        lon\n      }\n    }\n  };\n};\n\nexport default transformData;\n","import React, { useContext } from \"react\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Loading.css\";\n\nconst Loading = () => {\n  const { translatedText } = useContext(LanguageContext);\n  return (\n    <div>\n      <h1>{translatedText.loading_Weather_Info_title}</h1>\n      <p>{translatedText.loading_Weather_Info_p}</p>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useContext } from \"react\";\nimport stringInject from \"stringinject\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Current.css\";\n\nconst Current = props => {\n  const { translatedText } = useContext(LanguageContext);\n  const {\n    temperature,\n    feels_like,\n    humidity,\n    description,\n    icon,\n    wiSpeed,\n    city,\n    country,\n    dt,\n    sunHours,\n    settings,\n    refresh\n  } = props;\n  const windMetrics = settings === \"metric\" ? \"m/s\" : \"mi/h\";\n  const sunHoursperDay = sunHours.sunHours;\n\n  return (\n    <div className=\"Current\">\n      <div className=\"Country_City\">\n        <h2>{`${city}, ${country}`}</h2>\n        <button onClick={refresh}>⟳</button>\n      </div>\n      <div className=\"Weather\">\n        <div className=\"Temp\">\n          <div className=\"Temp__Current\">{temperature}º</div>\n          <div className=\"Temp__Feels\">\n            {translatedText.feels_like}: {feels_like}º\n          </div>\n        </div>\n        \n        <div className=\"Icon\">\n          <div className=\"Icon_Image\">\n            <i className={`owf owf-${icon} owf-8x`} />\n          </div>\n          <div className=\"Description\">{description}</div>\n        </div>\n        \n      </div>\n      <div className=\"Details\">\n        <div className=\"Humidity\">\n          {translatedText.humidity}: {humidity}%\n        </div>\n        <div className=\"Wind\">\n          {translatedText.wind}: {wiSpeed} {windMetrics}\n        </div>\n        <div className=\"Update\">\n          {translatedText.updated}: {dt}\n        </div>\n        <div className=\"SunHours\">\n          <div className=\"extra__sun\">\n            <div className=\"extra__sunrise\">\n              {translatedText.sunrise}: {sunHours.sunrise}\n            </div>\n            <div className=\"extra__sunset\">\n              {translatedText.sunset}: {sunHours.sunset}\n            </div>\n          </div>\n          <div>{stringInject(translatedText.sunHours, [sunHoursperDay])}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Current;\n","import React, { useContext } from \"react\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\nimport \"moment/locale/it\";\nimport \"moment/locale/fr\";\nimport \"moment/locale/de\";\nimport \"moment/locale/el\";\nimport \"moment/locale/pt\";\nimport \"moment/locale/ru\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Forecast.css\";\nimport { getLinearGradient } from \"./backgroundColor\";\n\nconst renderForecastDay = (list, settings) => {\n  const max = list\n    .map(day => day.max)\n    .reduce((a, b) => {\n      return Math.max(a, b);\n    });\n  return list.map(day => {\n    const percent = (day.max / max) * 80;\n\n    return (\n      <div key={day.date} className=\"row\">\n        <h6>{moment(day.date).format(\"ddd, Do\")}</h6>\n        <div className=\"dayForecast\">\n          <span className=\"min\">{day.min}</span>\n          <span className=\"max\" \n            style={{\n              width: `${percent}%`,\n              background: getLinearGradient(day.max, settings)\n          }}>\n            {day.max}\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nconst Forecast = props => {\n  const { list, settings } = props;\n  const { lang } = useContext(LanguageContext);\n  moment.locale(lang);\n  return (\n    <div className=\"Forecast\">\n      <div className=\"graphic\">{renderForecastDay(list, settings)}</div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import \"./Toggle.css\";\nimport React from \"react\";\n\nconst Switch = ({ isF, handleToggle }) => {\n  return (\n    <>\n      <span className=\"mesureLabel\">C</span>\n      <input\n        checked={isF}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label className=\"react-switch-label\" htmlFor={`react-switch-new`}>\n        <span className={`react-switch-button`} />\n      </label>\n      <span className=\"mesureLabel\">F</span>\n    </>\n  );\n};\n\nexport default Switch;\n","import React, { Component } from \"react\";\nimport Toggle from \"../Switch/Toggle\";\nimport \"./Nav.css\";\n\nclass Nav extends Component {\n  state = {\n    isExpanded: false\n  };\n  handleOpen = () => {\n    const { isExpanded } = this.state;\n    this.setState({\n      isExpanded: !isExpanded\n    });\n  };\n  render() {\n    const { isExpanded } = this.state;\n    const { handleToggleChange, isF } = this.props;\n    return (\n      <nav className=\"Nav\">\n        <div className=\"navbar-home\">\n          <button className=\"toggle\" onClick={this.handleOpen}>\n            ☰\n          </button>\n        </div>\n        <ul className={\"navbar-links \" + (isExpanded ? \"opened\" : \"\")}>\n          <li className=\"navbar-link\">\n            <Toggle isF={isF} handleToggle={handleToggleChange} />\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\nexport default Nav;\n","import React from \"react\";\nimport { LanguageContext } from \"./Context\";\nimport { translations } from \"./translations\";\nimport config from \"./utils/config\";\nimport getCoords from \"./servicesClients/coordenates\";\nimport callApi from \"./servicesClients/weather\";\nimport transformData from \"./mutations/weatherData\";\nimport Loading from \"./components/Loading/Loading\";\nimport Current from \"./components/Current/Current\";\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Nav from \"./components/Nav/Nav\";\nimport \"./styles.css\";\n\nconst lang = navigator.language ? navigator.language.slice(0, 2) : \"en\";\nconst translated = {\n  lang,\n  translatedText: translations[lang]\n};\n\nexport default class App extends React.Component {\n  state = {\n    loading: true,\n    settings: \"metric\",\n    weatherData: {\n      currentWeather: [],\n      forecast: [],\n      system: []\n    }\n  };\n\n  componentDidMount() {\n    const metrics = this.state.settings;\n    getCoords()\n      .then(position => ({\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      }))\n      .then(coords => {\n        const weatherUrl = `${config.openWeatherUrl}weather?lat=${\n          coords.lat\n        }&lon=${coords.long}&units=${metrics}&lang=${lang}&appid=${\n          config.openWeatherApiKey\n        }`;\n\n        const forecastUrl = `${config.openWeatherUrl}forecast?lat=${\n          coords.lat\n        }&lon=${coords.long}&units=${metrics}&lang=${lang}&appid=${\n          config.openWeatherApiKey\n        }`;\n\n        return Promise.all([callApi(weatherUrl), callApi(forecastUrl)]);\n      })\n      .then(weather => transformData(weather))\n      .then(weatherData => {\n        this.setState({\n          weatherData,\n          loading: false\n        });\n      })\n      .catch(err =>\n        console.log(`there was an error: ${err.code} ; ${err.message}`)\n      );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.settings !== this.state.settings) {\n      this.handleRefresh();\n    }\n  }\n\n  handleToggle = value => {\n    const toggleValue = value.target.checked;\n    this.setState({\n      settings: toggleValue === true ? \"imperial\" : \"metric\"\n    });\n  };\n\n  handleRefresh = () => {\n    const {\n      weatherData: {\n        system: {\n          geo: { lat, lon }\n        }\n      },\n      settings\n    } = this.state;\n    const weatherUrl = `${\n      config.openWeatherUrl\n    }weather?lat=${lat}&lon=${lon}&units=${settings}&lang=${lang}&appid=${\n      config.openWeatherApiKey\n    }`;\n    const forecastUrl = `${\n      config.openWeatherUrl\n    }forecast?lat=${lat}&lon=${lon}&units=${settings}&lang=${lang}&appid=${\n      config.openWeatherApiKey\n    }`;\n    try {\n      Promise.all([callApi(weatherUrl), callApi(forecastUrl)])\n        .then(weather => transformData(weather))\n        .then(weatherData => {\n          this.setState({\n            weatherData,\n            loading: false\n          });\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  render() {\n    const {\n      loading,\n      settings,\n      weatherData: { currentWeather: current, system, forecast }\n    } = this.state;\n    const isF = settings === \"metric\" ? false : true;\n    if (loading) {\n      return (\n        <LanguageContext.Provider value={translated}>\n          <Loading />\n        </LanguageContext.Provider>\n      );\n    }\n    return (\n      <LanguageContext.Provider value={translated}>\n        <div className=\"background\">\n          <div className=\"grid-container\">\n            <Nav isF={isF} \n              handleToggleChange={this.handleToggle} />\n            <Current\n              {...current}\n              {...system}\n              settings={settings}\n              refresh={this.handleRefresh}\n            />\n            <Forecast \n              {...forecast} \n              settings={settings} />\n          </div>\n        </div>\n      </LanguageContext.Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}