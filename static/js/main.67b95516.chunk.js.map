{"version":3,"sources":["mutations/dateFomat.js","Context.js","translations/index.js","translations/en.js","translations/es.js","utils/config.js","servicesClients/coordenates.js","servicesClients/weather.js","mutations/maxMinByDate.js","mutations/weatherData.js","components/Loading/Loading.js","components/Current/Current.js","components/Forecast/Forecast.js","components/Switch/Toggle.js","components/Nav/Nav.js","App.js","index.js"],"names":["module","exports","dateFormat","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","timeFormat","dt","toLocaleTimeString","sunHours","getHours","getMinutes","getSeconds","LanguageContext","createContext","translations","en","loading_Weather_Info_title","loading_Weather_Info_p","feels_like","humidity","wind","updated","sunrise","sunset","es","config","openWeatherUrl","openWeatherApiKey","process","getCoords","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","navigator","geolocation","abrupt","Promise","resolve","reject","getCurrentPosition","stop","apply","this","arguments","callApi","url","api_call","fetch","sent","json","_x","getMaxMinByDate","list","aggregateByDate","map","wPoint","dt_txt","replace","temp","main","reduce","groups","item","group","temps","push","keys","curr","agg","currEle","min","undefined","max","transformData","data","_data","slicedToArray","weather","forecast","_weather$main","temperature","temp_max","temp_min","_weather$weather$","description","icon","id","speed","_weather$sys","sys","country","city","name","_weather$coord","coord","lat","lon","currentWeather","wiSpeed","system","geo","Loading","translatedText","useContext","react_default","createElement","Current","props","settings","refresh","windMetrics","sunHoursperDay","className","concat","onClick","stringInject","bgColors","getTempColor","metrics","MAX_VERYWARN","MAX_WARN","MAX_NORMAL","MAX_COLD","MAX_VERYCOLD","Forecast","lang","moment","locale","b","Math","percent","key","format","style","width","background","renderForecastDay","Switch","isF","handleToggle","Fragment","checked","onChange","type","htmlFor","Nav","Component","[object Object]","args","super","state","isExpanded","handleOpen","setState","render","_this$props","handleToggleChange","Switch_Toggle","language","slice","translated","App_lang","App","React","loading","weatherData","value","toggleValue","target","handleRefresh","_this$state","_this$state$weatherDa","weatherUrl","forecastUrl","all","then","error","console","log","componentDidMount","position","coords","latitude","long","longitude","catch","err","code","message","componentDidUpdate","prevProps","prevState","_this$state2","_this$state2$weatherD","current","Provider","components_Loading_Loading","components_Nav_Nav","components_Current_Current","assign","components_Forecast_Forecast","rootElement","document","getElementById","ReactDOM","App_App"],"mappings":"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","file":"static/js/main.67b95516.chunk.js","sourcesContent":["const dateFormat = date => {\n  let d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n};\n\nconst timeFormat = dt => {\n  const date = new Date(dt * 1000);\n  return date.toLocaleTimeString();\n};\n\nconst sunHours = dt => {\n  const date = new Date(dt * 1000);\n  return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n};\n\nmodule.exports = { dateFormat, timeFormat, sunHours };\n","import { createContext } from \"react\";\n\nexport const LanguageContext = createContext();\n","import en from \"./en\";\nimport es from \"./es\";\n\nexport const translations = {\n  en,\n  es\n};\n","export default {\n  loading_Weather_Info_title: \"Loading Weather Information\",\n  loading_Weather_Info_p: \"Please allow access to the browser location\",\n  feels_like: \"feels like\",\n  humidity: \"Humity\",\n  wind: \"Wind\",\n  updated: \"Updated at\",\n  sunrise: \"Sunrise\",\n  sunset: \"Sunset\",\n  sunHours: \"{0} hr of sun\"\n};\n","export default {\n  loading_Weather_Info_title: \"Cargando informacion del Tiempo\",\n  loading_Weather_Info_p:\n    \"Por favor, permita el acceso de la ubicacion en el navegador\",\n  feels_like: \"sensacion de\",\n  humidity: \"Humedad\",\n  wind: \"Viento\",\n  updated: \"Actualizado a las\",\n  sunrise: \"Salida\",\n  sunset: \"Puesta\",\n  sunHours: \"{0} hrs de sol\"\n};\n","const config = {\n  openWeatherUrl: \"https://api.openweathermap.org/data/2.5/\",\n  openWeatherApiKey: process.env.REACT_APP_APIKEY\n};\nexport default config;\n","const getCoords = async () => {\n  if (navigator.geolocation) {\n    return new Promise((resolve, reject) =>\n      navigator.geolocation.getCurrentPosition(resolve, reject)\n    );\n  } else {\n    return new Promise(resolve => resolve({}));\n  }\n};\n\nexport default getCoords;\n","const callApi = async url => {\n  const api_call = await fetch(url);\n  return api_call.json();\n};\n\nexport default callApi;\n","import { dateFormat } from './dateFomat';\n\nconst getMaxMinByDate = list => {\n  const aggregateByDate = list\n    .map(wPoint => ({\n      date: dateFormat(wPoint.dt_txt.replace(/-/g, '/')),\n      temp: wPoint.main.temp\n    }))\n    .reduce((groups, item) => {\n      const group = groups[item.date] || { date: groups[item.date], temps: [] };\n      group.date = item.date;\n      group.temps.push(item.temp);\n      groups[item.date] = group;\n      return groups;\n    }, {});\n\n  const groupByDateArray = Object.keys(aggregateByDate).map(date => {\n    return {\n      date,\n      temps: aggregateByDate[date].temps\n    };\n  });\n\n  const tempMaxMinByDate = groupByDateArray.map(curr => {\n    const maxMinByDate = curr.temps.reduce((agg, currEle) => {\n      agg.date = curr.date;\n      agg.min = agg.min === undefined || currEle < agg.min ? currEle : agg.min;\n      agg.max = agg.max === undefined || currEle > agg.max ? currEle : agg.max;\n      //agg[datesTemps[i].date] = minMax\n      return agg;\n    }, {});\n    //console.log(x)\n    return maxMinByDate;\n  });\n  return tempMaxMinByDate;\n};\nexport default getMaxMinByDate;\n","import getMaxMinByDate from './maxMinByDate';\nimport { timeFormat, sunHours } from './dateFomat';\n\nconst transformData = data => {\n  const [weather, forecast] = data;\n  const {\n    main: { temp: temperature, feels_like, temp_max, temp_min, humidity },\n    weather: [{ description, id: icon }],\n    wind: { speed },\n    sys: { country, sunrise, sunset },\n    dt,\n    name: city,\n    coord: { lat, lon }\n  } = weather;\n  const { list } = forecast;\n  return {\n    currentWeather: {\n      temperature,\n      feels_like,\n      temp_max,\n      temp_min,\n      humidity,\n      description,\n      icon,\n      wiSpeed: speed,\n      dt: timeFormat(dt)\n    },\n    forecast: {\n      list: getMaxMinByDate(list)\n    },\n    system: {\n      country,\n      city,\n      sunHours: {\n        sunrise: timeFormat(sunrise),\n        sunset: timeFormat(sunset),\n        sunHours: sunHours(sunset - sunrise)\n      },\n      geo: {\n        lat,\n        lon\n      }\n    }\n  };\n};\n\nexport default transformData;\n","import React, { useContext } from \"react\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Loading.css\";\n\nconst Loading = () => {\n  const { translatedText } = useContext(LanguageContext);\n  return (\n    <div>\n      <h1>{translatedText.loading_Weather_Info_title}</h1>\n      <p>{translatedText.loading_Weather_Info_p}</p>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useContext } from \"react\";\nimport stringInject from \"stringinject\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Current.css\";\n\nconst Current = props => {\n  const { translatedText } = useContext(LanguageContext);\n  const {\n    temperature,\n    feels_like,\n    humidity,\n    description,\n    icon,\n    wiSpeed,\n    city,\n    country,\n    dt,\n    sunHours,\n    settings,\n    refresh\n  } = props;\n  const windMetrics = settings === \"metric\" ? \"m/s\" : \"mi/h\";\n  const sunHoursperDay = sunHours.sunHours;\n\n  return (\n    <div className=\"Current\">\n      <div className=\"Country_City\">\n        <div>{`${city}, ${country}`}</div>\n        <button onClick={refresh}>⟳</button>\n      </div>\n      <div className=\"Weather\">\n        <div className=\"Temp\">\n          <div className=\"Temp__Current\">{temperature}º</div>\n          <div className=\"Temp__Feels\">\n            {translatedText.feels_like}: {feels_like}º\n          </div>\n        </div>\n        \n        <div className=\"Icon\">\n          <div className=\"Icon_Image\">\n            <i className={`owf owf-${icon} owf-8x`} />\n          </div>\n          <div className=\"Description\">{description}</div>\n        </div>\n        \n      </div>\n      <div className=\"Details\">\n        <div className=\"Humidity\">\n          {translatedText.humidity}: {humidity}%\n        </div>\n        <div className=\"Wind\">\n          {translatedText.wind}: {wiSpeed} {windMetrics}\n        </div>\n        <div className=\"Update\">\n          {translatedText.updated}: {dt}\n        </div>\n        <div className=\"SunHours\">\n          <div className=\"extra__sun\">\n            <div className=\"extra__sunrise\">\n              {translatedText.sunrise}: {sunHours.sunrise}\n            </div>\n            <div className=\"extra__sunset\">\n              {translatedText.sunset}: {sunHours.sunset}\n            </div>\n          </div>\n          <div>{stringInject(translatedText.sunHours, [sunHoursperDay])}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Current;\n","import React, { useContext } from \"react\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\nimport \"moment/locale/it\";\nimport \"moment/locale/fr\";\nimport \"moment/locale/de\";\nimport \"moment/locale/el\";\nimport \"moment/locale/pt\";\nimport \"moment/locale/ru\";\nimport { LanguageContext } from \"../../Context\";\nimport \"./Forecast.css\";\n\nconst bgColors = {\n  burning: \"rgba(245, 87, 66, 1)\",\n  verywarm: \"rgba(255, 130, 20, 1)\",\n  warm: \"rgba(240, 216, 0, 1)\",\n  normal: \"rgba(62, 179, 62, 1)\",\n  cold: \"rgba(0, 255, 244, 1)\",\n  verycold: \"rgba(0, 164, 255, 1)\"\n};\n\nconst getTempColor = (temp, metrics) => {\n  const MAX_VERYWARN = metrics === \"metric\" ? 40 : 104;\n  const MAX_WARN = metrics === \"metric\" ? 30 : 86;\n  const MAX_NORMAL = metrics === \"metric\" ? 20 : 68;\n  const MAX_COLD = metrics === \"metric\" ? 10 : 50;\n  const MAX_VERYCOLD = metrics === \"metric\" ? 0 : 32;\n  if (temp >= MAX_VERYWARN) {\n    return bgColors.burning;\n  }\n  if (MAX_WARN <= temp && temp < MAX_VERYWARN) {\n    return bgColors.verywarm;\n  }\n  if (MAX_NORMAL <= temp && temp < MAX_WARN) {\n    return bgColors.warm;\n  }\n  if (MAX_COLD <= temp && temp < MAX_NORMAL) {\n    return bgColors.normal;\n  }\n  if (MAX_VERYCOLD <= temp && temp < MAX_COLD) {\n    return bgColors.cold;\n  }\n  if (temp < MAX_VERYCOLD) {\n    return bgColors.verycold;\n  }\n};\n\nconst renderForecastDay = (list, settings) => {\n  const max = list\n    .map(day => day.max)\n    .reduce((a, b) => {\n      return Math.max(a, b);\n    });\n  return list.map(day => {\n    const percent = (day.max / max) * 80;\n\n    return (\n      <div key={day.date} className=\"row\">\n        <h6>{moment(day.date).format(\"ddd, Do\")}</h6>\n        <div className=\"dayForecast\">\n          <span className=\"min\">{day.min}</span>\n          <span className=\"max\" \n            style={{\n              width: `${percent}%`,\n              background: `linear-gradient(90deg, ${getTempColor(\n                -2,\n                settings\n              )} 0%, ${getTempColor(4, settings)} 15%, ${getTempColor(\n                day.max,\n                settings\n              )} 100%)` \n          }}>\n            {day.max}\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nconst Forecast = props => {\n  const { list, settings } = props;\n  const { lang } = useContext(LanguageContext);\n  moment.locale(lang);\n  return (\n    <div className=\"Forecast\">\n      <div className=\"graphic\">{renderForecastDay(list, settings)}</div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import \"./Toggle.css\";\nimport React from \"react\";\n\nconst Switch = ({ isF, handleToggle }) => {\n  return (\n    <>\n      <span className=\"mesureLabel\">C</span>\n      <input\n        checked={isF}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label className=\"react-switch-label\" htmlFor={`react-switch-new`}>\n        <span className={`react-switch-button`} />\n      </label>\n      <span className=\"mesureLabel\">F</span>\n    </>\n  );\n};\n\nexport default Switch;\n","import React, { Component } from \"react\";\nimport Toggle from \"../Switch/Toggle\";\nimport \"./Nav.css\";\n\nclass Nav extends Component {\n  state = {\n    isExpanded: false\n  };\n  handleOpen = () => {\n    const { isExpanded } = this.state;\n    this.setState({\n      isExpanded: !isExpanded\n    });\n  };\n  render() {\n    const { isExpanded } = this.state;\n    const { handleToggleChange, isF } = this.props;\n    return (\n      <nav className=\"Nav\">\n        <div className=\"navbar-home\">\n          <button className=\"toggle\" onClick={this.handleOpen}>\n            ☰\n          </button>\n        </div>\n        <ul className={\"navbar-links \" + (isExpanded ? \"opened\" : \"\")}>\n          <li className=\"navbar-link\">\n            <Toggle isF={isF} handleToggle={handleToggleChange} />\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\nexport default Nav;\n","import React from \"react\";\nimport { LanguageContext } from \"./Context\";\nimport { translations } from \"./translations\";\nimport config from \"./utils/config\";\nimport getCoords from \"./servicesClients/coordenates\";\nimport callApi from \"./servicesClients/weather\";\nimport transformData from \"./mutations/weatherData\";\nimport Loading from \"./components/Loading/Loading\";\nimport Current from \"./components/Current/Current\";\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Nav from \"./components/Nav/Nav\";\nimport \"./styles.css\";\n\nconst lang = navigator.language ? navigator.language.slice(0, 2) : \"en\";\nconst translated = {\n  lang,\n  translatedText: translations[lang]\n};\n\nexport default class App extends React.Component {\n  state = {\n    loading: true,\n    settings: \"metric\",\n    weatherData: {\n      currentWeather: [],\n      forecast: [],\n      system: []\n    }\n  };\n\n  componentDidMount() {\n    const metrics = this.state.settings;\n    getCoords()\n      .then(position => ({\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      }))\n      .then(coords => {\n        const weatherUrl = `${config.openWeatherUrl}weather?lat=${\n          coords.lat\n        }&lon=${coords.long}&units=${metrics}&lang=${lang}&appid=${\n          config.openWeatherApiKey\n        }`;\n\n        const forecastUrl = `${config.openWeatherUrl}forecast?lat=${\n          coords.lat\n        }&lon=${coords.long}&units=${metrics}&lang=${lang}&appid=${\n          config.openWeatherApiKey\n        }`;\n\n        return Promise.all([callApi(weatherUrl), callApi(forecastUrl)]);\n      })\n      .then(weather => transformData(weather))\n      .then(weatherData => {\n        this.setState({\n          weatherData,\n          loading: false\n        });\n      })\n      .catch(err =>\n        console.log(`there was an error: ${err.code} ; ${err.message}`)\n      );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.settings !== this.state.settings) {\n      this.handleRefresh();\n    }\n  }\n\n  handleToggle = value => {\n    const toggleValue = value.target.checked;\n    this.setState({\n      settings: toggleValue === true ? \"imperial\" : \"metric\"\n    });\n  };\n\n  handleRefresh = () => {\n    const {\n      weatherData: {\n        system: {\n          geo: { lat, lon }\n        }\n      },\n      settings\n    } = this.state;\n    const weatherUrl = `${\n      config.openWeatherUrl\n    }weather?lat=${lat}&lon=${lon}&units=${settings}&lang=${lang}&appid=${\n      config.openWeatherApiKey\n    }`;\n    const forecastUrl = `${\n      config.openWeatherUrl\n    }forecast?lat=${lat}&lon=${lon}&units=${settings}&lang=${lang}&appid=${\n      config.openWeatherApiKey\n    }`;\n    try {\n      Promise.all([callApi(weatherUrl), callApi(forecastUrl)])\n        .then(weather => transformData(weather))\n        .then(weatherData => {\n          this.setState({\n            weatherData,\n            loading: false\n          });\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  render() {\n    const {\n      loading,\n      settings,\n      weatherData: { currentWeather: current, system, forecast }\n    } = this.state;\n    const isF = settings === \"metric\" ? false : true;\n    if (loading) {\n      return (\n        <LanguageContext.Provider value={translated}>\n          <Loading />\n        </LanguageContext.Provider>\n      );\n    }\n    return (\n      <LanguageContext.Provider value={translated}>\n        <div className=\"background\">\n          <div className=\"grid-container\">\n            <Nav isF={isF} \n              handleToggleChange={this.handleToggle} />\n            <Current\n              {...current}\n              {...system}\n              settings={settings}\n              refresh={this.handleRefresh}\n            />\n            <Forecast \n              {...forecast} \n              settings={settings} />\n          </div>\n        </div>\n      </LanguageContext.Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}